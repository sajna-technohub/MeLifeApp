package com.technohub.melifeapp.views;import android.app.ProgressDialog;import android.graphics.Color;import android.os.Bundle;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.text.Html;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.ListView;import android.widget.SearchView;import android.widget.TableLayout;import android.widget.TextView;import com.github.mikephil.charting.charts.BarChart;import com.github.mikephil.charting.components.AxisBase;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.data.BarData;import com.github.mikephil.charting.data.BarDataSet;import com.github.mikephil.charting.data.BarEntry;import com.github.mikephil.charting.formatter.IAxisValueFormatter;import com.github.mikephil.charting.formatter.IndexAxisValueFormatter;import com.github.mikephil.charting.utils.ColorTemplate;import com.squareup.picasso.Picasso;import com.technohub.melifeapp.Interfaces.ISkill;import com.technohub.melifeapp.R;import com.technohub.melifeapp.classes.BriefOverviewAdapter;import com.technohub.melifeapp.classes.DetailedMultipleIntelligenceAdapter;import com.technohub.melifeapp.classes.DetailedSuggestedAdapter;import com.technohub.melifeapp.classes.Helper;import com.technohub.melifeapp.classes.InterestAreaAdapter;import com.technohub.melifeapp.classes.SuggestedCareerAdapter;import com.technohub.melifeapp.models.LoginResponse;import com.technohub.melifeapp.models.SkillDescInterestAreas;import com.technohub.melifeapp.models.SkillDescTypeoIntelligence;import com.technohub.melifeapp.models.SkillReportRequest;import com.technohub.melifeapp.models.SkillReportResponse;import com.technohub.melifeapp.presenter.SkillReportPresenter;import com.technohub.melifeapp.services.ApiClient;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.Locale;public class SkillReportFragment extends Fragment implements ISkill.View {    SkillReportPresenter skillReportPresenter;    View v;    TextView skill_Txt_titlename,skill_disclaimer_desc,skill_Txt_Age,skill_Txt_testdate,skill_Txt_description,skill_Txt_detailedsuggtitle,skill_Txt_multscore,skil_Txt_titledesintelligence,skill_Txt_multgraph,skill_Txt_suggestedtitle,skill_Txt_interesttitle,skill_Txt_interestdesc,skill_Txt_multipledesc,skill_Txt_yourintitle,skill_Txt_tableinterest,skill_Txt_brieftitle;    TextView skill_Txt_briefdesc,skill_Txt_Education,skill_Txt_mobile,skill_Txt_email,skill_Txt_identifydesc,skill_Txt_titlemultiple,skill_Txt_Name,skil_Txt_whatsnext,skil_Txt_testdesign,skill_Txt_whatsdesc,skill_Txt_testdesigndesc;    BarChart SkillBarChart;    ImageView skilllogoImg,skillwhatImg,skill_hexgraph;    TableLayout SkilltableLayout,skill_table_score;    RecyclerView briefoverviewList,interestareaList,suggestedcareerList,detailedsuggestedlist,multipleintelligencelist;    ArrayList<SkillDescTypeoIntelligence> BARENTRY ;    ProgressDialog progressdialog;    int testd,examd;    ImageView skillimgh1,skillimgh2,skillimgh3,skillimgh4,skillimgh5,skillimgh6;//    TextView skill_conven,skill_artistic,skill_investigative,skill_realistic,skill_social,skill_enterprising;    SkillReportRequest skillReportRequest=new SkillReportRequest();    LinearLayoutManager layoutManager,layoutManager1,layoutManager2,layoutManager3;    HorizontalScrollView headerScroll;    @Override    public void init() {        skill_Txt_description=v.findViewById(R.id.skill_Txt_description);        skill_Txt_mobile=v.findViewById(R.id.skill_Txt_mobile);        skill_Txt_email=v.findViewById(R.id.skill_Txt_email);        skillimgh1=v.findViewById(R.id.skillimgh1);        skillimgh2=v.findViewById(R.id.skillimgh2);        skillimgh3=v.findViewById(R.id.skillimgh3);        skillimgh4=v.findViewById(R.id.skillimgh4);        skillimgh5=v.findViewById(R.id.skillimgh5);//        skillimgh6=v.findViewById(R.id.skillimgh6);        skill_Txt_Name=v.findViewById(R.id.skill_Txt_Name);        skill_Txt_Education=v.findViewById(R.id.skill_Txt_Education);//        skill_Txt_interestdesc=v.findViewById(R.id.skill_Txt_interestdesc);        skill_Txt_briefdesc=v.findViewById(R.id.skill_Txt_briefdesc);//        skill_Txt_identifydesc=v.findViewById(R.id.skill_Txt_identifydesc);        SkilltableLayout=v.findViewById(R.id.skill_table);        skill_Txt_Age=v.findViewById(R.id.skill_Txt_Age);        skill_table_score=v.findViewById(R.id.skill_table_score);        skill_disclaimer_desc=v.findViewById(R.id.skill_disclaimer_desc);        briefoverviewList=v.findViewById(R.id.skill_List_briefoverview);        interestareaList=v.findViewById(R.id.skill_List_interestarea);//        suggestedcareerList=v.findViewById(R.id.skill_List_suggestedcareer);        detailedsuggestedlist=v.findViewById(R.id.skill_List_detailedsuggested);        multipleintelligencelist=v.findViewById(R.id.skill_List_desctypeIntelligence);        skill_Txt_multipledesc=v.findViewById(R.id.skill_Txt_multipledesc);        SkillBarChart=v.findViewById(R.id.SkillBarChart);//        skill_hexgraph=v.findViewById(R.id.skill_hexgraph);//        skill_Txt_yourintitle=v.findViewById(R.id.skill_Txt_yourintitle);        skill_Txt_tableinterest=v.findViewById(R.id.skill_Txt_tableinterest);        skill_Txt_brieftitle=v.findViewById(R.id.skill_Txt_brieftitle);//        skill_Txt_interesttitle=v.findViewById(R.id.skill_Txt_interesttitle);        skill_Txt_suggestedtitle=v.findViewById(R.id.skill_Txt_suggestedtitle);//        skill_Txt_detailedsuggtitle=v.findViewById(R.id.skill_Txt_detailedsuggtitle);        skill_Txt_multgraph=v.findViewById(R.id.skill_Txt_multgraph);        skil_Txt_titledesintelligence=v.findViewById(R.id.skil_Txt_titledesintelligence);        skill_Txt_multscore=v.findViewById(R.id.skill_Txt_multscore);//        skilllogoImg=v.findViewById(R.id.skilllogoImg);        skill_Txt_testdate=v.findViewById(R.id.skill_Txt_testdate);        skill_Txt_titlemultiple=v.findViewById(R.id.skill_Txt_titlemultiple);        skil_Txt_whatsnext=v.findViewById(R.id.skil_Txt_whatsnext);//        skil_Txt_testdesign=v.findViewById(R.id.skil_Txt_testdesign);        skill_Txt_whatsdesc=v.findViewById(R.id.skill_Txt_whatsdesc);        skillwhatImg=v.findViewById(R.id.skilltaking);//        skill_Txt_titlename=v.findViewById(R.id.skill_Txt_titlename);        skill_Txt_testdesigndesc=v.findViewById(R.id.skill_Txt_testdesigndesc);        headerScroll = v.findViewById(R.id.headerScroll);        progressdialog = new ProgressDialog(getContext());        progressdialog.setMessage("Please Wait....");        progressdialog.setCancelable(false);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        v= inflater.inflate(R.layout.skill_finder_report, container, false);        v.setBackgroundColor(Color.WHITE);        Bundle args = getArguments();        if (args != null) {             examd = getArguments().getInt("examid");             testd = getArguments().getInt("testid");             skillReportRequest.setUser_id(new LoginResponse().getSharedPreferences(getContext(), "userid"));             skillReportRequest.setExam_id(examd+"");             skillReportRequest.setTest_id(testd+"");        }        skillReportPresenter=new SkillReportPresenter(this,skillReportRequest);        skillReportPresenter.created();        skillReportPresenter.LoadHexImg();        progressdialog.show();        return v;    }    private static DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());    public static int calculateAge(String date) {        int age = 0;        try {            Date date1 = dateFormat.parse(date);            Calendar now = Calendar.getInstance();            Calendar dob = Calendar.getInstance();            dob.setTime(date1);            if (dob.after(now)) {                throw new IllegalArgumentException("Can't be born in the future");            }            int year1 = now.get(Calendar.YEAR);            int year2 = dob.get(Calendar.YEAR);            age = year1 - year2;            int month1 = now.get(Calendar.MONTH);            int month2 = dob.get(Calendar.MONTH);            if (month2 > month1) {                age--;            } else if (month1 == month2) {                int day1 = now.get(Calendar.DAY_OF_MONTH);                int day2 = dob.get(Calendar.DAY_OF_MONTH);                if (day2 > day1) {                    age--;                }            }        } catch (ParseException e) {            e.printStackTrace();        }        return age ;    }    @Override    public void LoadSkillReportData(SkillReportResponse skillReportResponse) {        skill_Txt_testdate.setText(skillReportResponse.getRecord().getUser_details().getC_date());        skill_Txt_Name.setText(skillReportResponse.getRecord().getUser_details().getSt_name());        skill_disclaimer_desc.setText(Html.fromHtml(skillReportResponse.getRecord().getTest_details().getDisclaimer()));        skill_Txt_Age.setText(calculateAge(skillReportResponse.getRecord().getUser_details().getSt_dob()+""));        skill_Txt_mobile.setText(skillReportResponse.getRecord().getUser_details().getSt_mobile());        skill_Txt_email.setText(skillReportResponse.getRecord().getUser_details().getSt_email());        skill_Txt_Education.setText(skillReportResponse.getRecord().getUser_details().getSt_qualification());//        skill_Txt_identifydesc.setText(Html.fromHtml(skillReportResponse.getRecord().getTest_details().getIdentify_skill_based_on_your_interest()));        skill_Txt_description.setText(Html.fromHtml(skillReportResponse.getRecord().getTest_details().getDescription()));        skill_Txt_briefdesc.setText(Html.fromHtml(skillReportResponse.getRecord().getDimension_details().getBrief_description()));//        skill_Txt_interestdesc.setText(Html.fromHtml(skillReportResponse.getRecord().getDimension_details().getWhat_is_interest()));        Log.e("skilllogo",skillReportResponse.getRecord().getTest_icon());//        Picasso.get().load("http://"+skillReportResponse.getRecord().getTest_icon()).into(skilllogoImg);        loadtable(skillReportResponse.getRecord().getAll_details());        loadtableInteligence(skillReportResponse.getRecord().getAll_details2());        Log.e("briefoverview","showing");        layoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);//        briefoverviewList.addItemDecoration(new DividerItemDecoration(getContext(), 0));         BriefOverviewAdapter adapter = new BriefOverviewAdapter(this, skillReportResponse.getRecord().getAll_details(),getContext());         briefoverviewList.setLayoutManager(layoutManager);         briefoverviewList.setAdapter(adapter);         adapter.notifyDataSetChanged();        layoutManager1 = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);        InterestAreaAdapter interestAreaAdapter=new InterestAreaAdapter(this, skillReportResponse.getRecord().getAll_details(),getContext());        interestareaList.setLayoutManager(layoutManager1);        interestareaList.setAdapter(interestAreaAdapter);        interestAreaAdapter.notifyDataSetChanged();//        SuggestedCareerAdapter suggestedCareerAdapter=new SuggestedCareerAdapter(this, skillReportResponse.getRecord().getAll_details1(),getContext());//        suggestedcareerList.setLayoutManager(layoutManager);//        suggestedcareerList.setAdapter(suggestedCareerAdapter);//        suggestedCareerAdapter.notifyDataSetChanged();        layoutManager2 = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);        DetailedSuggestedAdapter detailedSuggestedAdapter=new DetailedSuggestedAdapter(this, skillReportResponse.getRecord().getAll_details1(),getContext());        detailedsuggestedlist.setLayoutManager(layoutManager2);        detailedsuggestedlist.setAdapter(detailedSuggestedAdapter);        detailedSuggestedAdapter.notifyDataSetChanged();//        skill_Txt_titlemultiple.setText(skillReportResponse.getRecord().getAll_details2().get(0).getTitle_1());        skill_Txt_multipledesc.setText(Html.fromHtml(skillReportResponse.getRecord().getMultiple_inteli_details().get(0).getMultiple_intelligence_descp()));        layoutManager3 = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);        DetailedMultipleIntelligenceAdapter detailedMultipleIntelligenceAdapter=new DetailedMultipleIntelligenceAdapter(this, skillReportResponse.getRecord().getAll_details2(),getContext());        multipleintelligencelist.setLayoutManager(layoutManager3);        multipleintelligencelist.setAdapter(detailedMultipleIntelligenceAdapter);        detailedMultipleIntelligenceAdapter.notifyDataSetChanged();//        skill_Txt_yourintitle.setText(skillReportResponse.getRecord().getAll_details().get(0).getTitle_1());        skill_Txt_tableinterest.setText(skillReportResponse.getRecord().getAll_details().get(0).getTitle_2());        skill_Txt_brieftitle.setText(skillReportResponse.getRecord().getAll_details().get(0).getTitle_3());//        skill_Txt_interesttitle.setText(skillReportResponse.getRecord().getAll_details().get(0).getTitle_4());//        skill_Txt_suggestedtitle.setText(skillReportResponse.getRecord().getAll_details1().get(0).getTitle_1());//        skill_Txt_detailedsuggtitle.setText(skillReportResponse.getRecord().getAll_details1().get(0).getTitle_2());        skill_Txt_multgraph.setText(skillReportResponse.getRecord().getAll_details2().get(0).getTitle_2());        skil_Txt_titledesintelligence.setText(skillReportResponse.getRecord().getAll_details2().get(0).getTitle_4());        skill_Txt_multscore.setText(skillReportResponse.getRecord().getAll_details2().get(0).getTitle_3());        skill_Txt_whatsdesc.setText(Html.fromHtml(skillReportResponse.getRecord().getTest_details().getWhats_next()));        skill_Txt_testdesigndesc.setText(Html.fromHtml(skillReportResponse.getRecord().getTest_details().getTest_design()));        Picasso.get().load(ApiClient.IMG_URL+"ckfinder/userfiles/files/im1.jpeg").placeholder(getContext().getResources().getDrawable(R.drawable.noimage)).into(skillimgh1);        Picasso.get().load(ApiClient.IMG_URL+"ckfinder/userfiles/files/im2.jpeg").placeholder(getContext().getResources().getDrawable(R.drawable.noimage)).into(skillimgh2);        Picasso.get().load(ApiClient.IMG_URL+"ckfinder/userfiles/files/im3.jpeg").placeholder(getContext().getResources().getDrawable(R.drawable.noimage)).into(skillimgh3);        Picasso.get().load(ApiClient.IMG_URL+"ckfinder/userfiles/files/im4.jpeg").placeholder(getContext().getResources().getDrawable(R.drawable.noimage)).into(skillimgh4);        Picasso.get().load(ApiClient.IMG_URL+"ckfinder/userfiles/files/im5.jpeg").placeholder(getContext().getResources().getDrawable(R.drawable.noimage)).into(skillimgh5);        progressdialog.dismiss();    } void loadtable(ArrayList<SkillDescInterestAreas> skillDescInterestAreas)    {        for (SkillDescInterestAreas s:skillDescInterestAreas){//add list of items frm arraylist in json            View tableRow1 = LayoutInflater.from(getContext()).inflate(R.layout.table_layout,null,false);            TextView tv_area = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablearea);            TextView tv_code  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablecode);            TextView tv_score  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablescore);            TextView tv_interest  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tableinterest);            TextView tv_personality  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablepersonality);            TextView tv_work  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablework);            TextView tv_potential = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablepotential);            TextView tv_values  = (TextView) tableRow1.findViewById(R.id.skill_Txt_tablevalues);            tv_area.setText(s.getSub_dimension1());            tv_code.setText(Html.fromHtml(s.getCode()));            tv_score.setText(s.getSub_dimension_score());            tv_interest.setText(Html.fromHtml(s.getInterests()));            tv_personality.setText(s.getPersonality());            tv_work.setText(Html.fromHtml(s.getWork_activities()));            tv_potential.setText(Html.fromHtml(s.getPotential_skills()));            tv_values.setText(Html.fromHtml(s.getValue()));            SkilltableLayout.addView(tableRow1);        }    }    void loadtableInteligence(ArrayList<SkillDescTypeoIntelligence> skillDescTypeoIntelligences)    {        ArrayList multipleval = new ArrayList();        ArrayList<String> multipletop = new ArrayList<String>();        ArrayList<String> xAxisLables = new ArrayList();        int i=0;        for (SkillDescTypeoIntelligence s:skillDescTypeoIntelligences){//add list of items frm arraylist in json            View tableRow = LayoutInflater.from(getContext()).inflate(R.layout.skill_tablescore,null,false);            TextView skillintelli = (TextView) tableRow.findViewById(R.id.skillintelli);            TextView skillscore  = (TextView) tableRow.findViewById(R.id.skillscore);            skillintelli.setText(s.getSub_dimension1());            skillscore.setText(s.getSub_dimension_score());            xAxisLables.add(s.getSub_dimension());            skill_table_score.addView(tableRow);            multipleval.add(new BarEntry(i,Float.parseFloat(s.getSub_dimension_score())));            multipletop.add(s.getSub_dimension());            i=i+1;        }        BarDataSet bardataset = new BarDataSet(multipleval, "Multiple Intelligence");        SkillBarChart.animateY(5000);        bardataset.setColors(                ContextCompat.getColor(SkillBarChart.getContext(), R.color.colorskillbarblu),                ContextCompat.getColor(SkillBarChart.getContext(), R.color.colorskillbargre),                ContextCompat.getColor(SkillBarChart.getContext(), R.color.colorskillbaryel)        );        BarData data = new BarData( bardataset);        SkillBarChart.setData(data);        SkillBarChart.animateXY(2000, 2000);        SkillBarChart.invalidate();        XAxis xAxis = SkillBarChart.getXAxis();        xAxis.setTextSize(2f);        xAxis.setSpaceMax(5f);        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);        xAxis.setValueFormatter(new IAxisValueFormatter() {            @Override            public String getFormattedValue(float value, AxisBase axis) {                return xAxisLables.get((int) value);            }        });    }    @Override    public void LoadHexImg(String imgUrl) {        Log.e("imgurl",imgUrl);//        Picasso.get().load(imgUrl).into(skill_hexgraph);    }    @Override    public void showLoading() {    }    @Override    public void hideLoading() {    }}